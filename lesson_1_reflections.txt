Viewing the differences between two files helps ascertain the difference between the working code and the incorrect code.

This is a massive time saving excercise when solving complex problems or debugging.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

I have a chronology of how my code has changed.
I could baseline various working versions.
Publish features introduced in each version.


What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

As a programmer I get to decide when to Commit.
If commits are done automatically they may be illogical for me.


Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

For code based version control, multiple files may have code which interacts for a software to work. Changes may be made in multiple files and hence logically should be tracked together.

How can you use the commands git log and git diff to view the history of files?

git log lets me view all the commits whcih have been done on the repository
git diff allows me to compare two versions.


How might using version control make you more confident to make changes that could break something?
very confident, as I could always go back to the last working version


Now that you have your workspace set up, what do you want to try using Git for?
Learning other git commands and functionality


Most recent: fa4c6bade4970c282b3870ad16f1bde8164663a9
Bugs introduced here: 547f4171a82ec6429d002c1acef357aec41d3f17

Speeding up Clones Bug: 003c8c197cd3b1e5b28b58f53ee14d7ebaa9bb3a
Prior: 746f762e38b5bbb7d0b837464ef6ec3f8ee5bf91